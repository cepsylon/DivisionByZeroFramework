#include "VulkanDispatchTable.h"

#include "VulkanModule.h"

#include <string.h>

#define INITIALIZE_VULKAN_FUNCTION(getProcAddr, object, name) my##name = reinterpret_cast<PFN_vk##name>(getProcAddr(object, "vk" #name))

void VulkanInstanceDispatchTable::Initialize(VkInstance anInstance)
{
#define INITIALIZE_VULKAN_INSTANCE_FUNCTION(name) INITIALIZE_VULKAN_FUNCTION(myGetInstanceProcAddr, anInstance, name)

	INITIALIZE_VULKAN_FUNCTION(VulkanModule::ourTable.myGetInstanceProcAddr, anInstance, GetInstanceProcAddr);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(GetDeviceProcAddr);

	INITIALIZE_VULKAN_INSTANCE_FUNCTION(DestroyInstance);

	INITIALIZE_VULKAN_INSTANCE_FUNCTION(DestroySurfaceKHR);

	INITIALIZE_VULKAN_INSTANCE_FUNCTION(EnumeratePhysicalDevices);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(GetPhysicalDeviceProperties);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(GetPhysicalDeviceFeatures);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(GetPhysicalDeviceQueueFamilyProperties);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(GetPhysicalDeviceSurfaceSupportKHR);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(GetPhysicalDeviceMemoryProperties);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(GetPhysicalDeviceSurfaceFormatsKHR);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(GetPhysicalDeviceSurfaceCapabilitiesKHR);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(EnumerateDeviceExtensionProperties);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(EnumerateDeviceLayerProperties);

	INITIALIZE_VULKAN_INSTANCE_FUNCTION(CreateDevice);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(DestroyDevice);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(CreateDebugUtilsMessengerEXT);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(DestroyDebugUtilsMessengerEXT);
	INITIALIZE_VULKAN_INSTANCE_FUNCTION(SubmitDebugUtilsMessageEXT);

#undef INITIALIZE_VULKAN_INSTANCE_FUNCTION
}

void VulkanDeviceDispatchTable::Initialize(VkDevice aDevice, PFN_vkGetDeviceProcAddr getDeviceProcAddr)
{
#define INITIALIZE_VULKAN_DEVICE_FUNCTION(name) INITIALIZE_VULKAN_FUNCTION(myGetDeviceProcAddr, aDevice, name)

	INITIALIZE_VULKAN_FUNCTION(getDeviceProcAddr, aDevice, GetDeviceProcAddr);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(GetDeviceQueue);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DeviceWaitIdle);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(AcquireNextImageKHR);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateSwapchainKHR);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroySwapchainKHR);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(GetSwapchainImagesKHR);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateImageView);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyImageView);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateRenderPass);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyRenderPass);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateFramebuffer);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyFramebuffer);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateCommandPool);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyCommandPool);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(AllocateCommandBuffers);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(FreeCommandBuffers);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateSemaphore);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroySemaphore);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateFence);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyFence);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(WaitForFences);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(ResetFences);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateShaderModule);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyShaderModule);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreatePipelineLayout);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyPipelineLayout);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateGraphicsPipelines);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyPipeline);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateBuffer);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyBuffer);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(GetBufferMemoryRequirements);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(BindBufferMemory);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(AllocateMemory);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(FreeMemory);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(MapMemory);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(UnmapMemory);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateDescriptorSetLayout);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyDescriptorSetLayout);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CreateDescriptorPool);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(DestroyDescriptorPool);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(AllocateDescriptorSets);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(FreeDescriptorSets);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(UpdateDescriptorSets);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(CmdBeginDebugUtilsLabelEXT);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(CmdEndDebugUtilsLabelEXT);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(CmdInsertDebugUtilsLabelEXT);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(SetDebugUtilsObjectNameEXT);

	INITIALIZE_VULKAN_DEVICE_FUNCTION(QueueSubmit);
	INITIALIZE_VULKAN_DEVICE_FUNCTION(QueuePresentKHR);

#undef INITIALIZE_VULKAN_DEVICE_FUNCTION
}

void VulkanCommandBufferDispatchTable::Initialize(VkDevice aDevice, PFN_vkGetDeviceProcAddr getDeviceProcAddr)
{
#define INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(name) INITIALIZE_VULKAN_FUNCTION(getDeviceProcAddr, aDevice, name)

	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(BeginCommandBuffer);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(EndCommandBuffer);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(CmdBeginRenderPass);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(CmdEndRenderPass);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(CmdBindPipeline);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(CmdSetViewport);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(CmdSetScissor);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(CmdBindDescriptorSets);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(CmdBindVertexBuffers);
	INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION(CmdDraw);

#undef INITIALIZE_VULKAN_COMMAND_BUFFER_FUNCTION
}
